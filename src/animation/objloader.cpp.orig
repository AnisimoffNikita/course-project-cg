#include "objloader.h"

#include <regex>
#include <algorithm>
#include <fstream>

#include "meshgenerator.h"

Mesh ObjLoader::Load(const string &filename)
{
    ifstream file (filename);
    if (!file.is_open())
        return Mesh();

    vector<Vertex> vertices;
    vector<Vertex> normals;
    vector<Triangle> triangles;

    regex vertexRe("v\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)");
    regex normalRe("vn\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)");
    regex triangleRe("f\\s+(-?\\d+)\\/(-?\\d+)?\\/(-?\\d+)?\\s+(-?\\d+)\\/(-?\\d+)?\\/(-?\\d+)?\\s+(-?\\d+)\\/(-?\\d+)?\\/(-?\\d+)?(?:\\s+(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?");
    regex materialRe("mtllib\\s+\\w+\\.\\w+");

    string line;
    while ( getline (file, line) )
    {
        smatch match;
        if(std::regex_search(line, match, vertexRe))
        {
            auto x = stod(match[1].str());
            auto y = stod(match[2].str());
            auto z = stod(match[3].str());
            vertices.push_back(Vertex(x,y,z));
        }
        else if(std::regex_search(line, match, normalRe))
        {
            auto x = stod(match[1].str());
            auto y = stod(match[2].str());
            auto z = stod(match[3].str());
            normals.push_back(Vertex(x,y,z));
        }
        else if(std::regex_search(line, match, triangleRe))
        {
            auto v1 = stod(match[1].str());
            auto n1 = stod(match[3].str());
            auto v2 = stod(match[4].str());
            auto n2 = stod(match[6].str());
            auto v3 = stod(match[7].str());
            auto n3 = stod(match[9].str());
            triangles.push_back(Triangle(v1,v2,v3,n1,n2,n3));
        }
//        else if(std::regex_search(line, match, materialRe))
//        {
//            auto v1 = match[1].str();
//            auto v2 = match[0].str();
//            auto v4 = match[0].str();
//        }
    }
    file.close();

    Mesh mesh;
    mesh.setVertices(vertices);
    mesh.setNormals(normals);
    mesh.setTriangles(triangles);

    return mesh;
}
