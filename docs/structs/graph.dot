"d7/dca/class_action" [ label="Action\nabstract\n|+Action ( duration : float, object : weak_ptr\< SceneObject \> )\l+update ( delta : float ) : bool \{pure-virtual\}\l+~Action (  ) \{virtual\}\l|#duration : float\l#object : weak_ptr\< SceneObject \>\l#time : float\l" shape="record",fixedsize=true,width=10]
"d7/d7b/class_action_manager" [ label="ActionManager\n|+ActionManager (  )\l+add ( action : unique_ptr\< Action \> && ) : void\l+update ( delta : float ) : void\l+~ActionManager (  ) \{virtual\}\l|-actions : vector\< unique_ptr\< Action \> \>\l" shape="record",fixedsize=true,width=10]
"d4/dd4/class_ambient_light" [ label="AmbientLight\n|+AmbientLight ( intensity : float )\l/+getIntensity (  : const Vec3 &,  : const Vec3 &,  : const Vec3 &, ka : const Color &,  : const Color &,  : const Color... ) : Color \{virtual\}\l/+isPoint (  ) : bool \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d5/dbd/class_ambient_light_factory" [ label="AmbientLightFactory\n|+AmbientLightFactory ( intensity : float )\l/+create (  ) : SharedSceneObject \{virtual\}\l+~AmbientLightFactory (  ) \{virtual\}\l|-light : std::unique_ptr\< AmbientLight \>\l" shape="record",fixedsize=true,width=10]
"d3/d30/class_animation_window" [ label="AnimationWindow\n|+AnimationWindow ( parent : QWidget * )\l+~AnimationWindow (  )\l|-ui : Ui::AnimationWindow *\l" shape="record",fixedsize=true,width=10] "d3/d14/class_blur" [ label="Blur\nabstract\n|+process ( image : Image & ) : void \{pure-virtual\}\l+~Blur (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"da/dbb/class_camera" [ label="Camera\n|+Camera ( position : const Vec3 &, lookAt : const Vec3 &, up : const Vec3 &, projection : const Mat4 & )\l/+draw (  : std::unique_ptr\< Renderer \> & ) : void \{virtual\}\l+getEyeVector (  ) : Vec3 \{virtual\}\l+getLookAt (  ) : const Vec3 & \{virtual\}\l+getPMatrix (  ) : const Mat4 & \{virtual\}\l+getPVMatrix (  ) : Mat4 \{virtual\}\l+getVMatrix (  ) : const Mat4 & \{virtual\}\l/+isCamera (  ) : bool \{virtual\}\l/+isLight (  ) : bool \{virtual\}\l+setLookAt ( target : const Vec3 & ) : void \{virtual\}\l/+setPosition ( value : const Vec3 & ) : void \{virtual\}\l/+transform ( transformation : Transformation & ) : void \{virtual\}\l#updateViewMatrix (  ) : void\l|#lookAt : Vec3\l#projectionMatrix : Mat4\l#up : Vec3\l#viewMatrix : Mat4\l" shape="record",fixedsize=true,width=10]
"d7/ddc/class_camera_factory" [ label="CameraFactory\n|+CameraFactory ( position : const Vec3 &, lookAt : const Vec3 &, up : const Vec3 &, data : const PerspectiveData & )\l/+create (  ) : SharedSceneObject \{virtual\}\l+~CameraFactory (  ) \{virtual\}\l|-camera : std::unique_ptr\< Camera \>\l" shape="record",fixedsize=true,width=10]
"d2/daa/struct_camera_factory_1_1_perspective_data" [ label="CameraFactory::PerspectiveData\n||+far : float\l+fovX : float\l+fovY : float\l+near : float\l" shape="record",fixedsize=true,width=10]
"d1/d15/class_canny_edge_detector" [ label="CannyEdgeDetector\n|+CannyEdgeDetector ( minThresh : int32, maxThresh : int32 )\l+getGaussKernelSize (  ) : int32\l+getGaussSigma (  ) : float\l+getMaxThresh (  ) : int32\l+getMinThresh (  ) : int32\l/+process ( image : Image & ) : void \{virtual\}\l+setGaussKernelSize ( value : int32 ) : void\l+setGaussSigma ( value : float ) : void\l+setMaxThresh ( value : int32 ) : void\l+setMinThresh ( value : int32 ) : void\l+~CannyEdgeDetector (  ) \{virtual\}\l-floatThreshold (  ) : void\l-gradients (  ) : void\l-hysteresis (  ) : void\l-hysteresisRecursive ( y : uint32, x : uint32 ) : void\l-nonMaxSuppression (  ) : void\l|-directions : GrayscaleImage\l-image : GrayscaleImage\l-maxThresh : int32\l-minThresh : int32\l" shape="record",fixedsize=true,width=10]
"d9/ddd/class_color" [ label="Color\n|+Color (  )\l+Color ( color : const Color & )\l+Color ( gray : uint8 )\l+Color ( r : uint8, g : uint8, b : uint8 )\l+getBlue (  ) : uint8\l+getGreen (  ) : uint8\l+getRed (  ) : uint8\l+operator* ( factor : float ) : Color\l+operator+= ( other : const Color & ) : Color &\l+setBlue ( value : uint8 ) : void\l+setGray ( gray : uint8 ) : void\l+setGreen ( value : uint8 ) : void\l+setRed ( value : uint8 ) : void\l|-b : uint8\l-g : uint8\l-r : uint8\l" shape="record",fixedsize=true,width=10]
"d1/d3e/class_common_transformation" [ label="CommonTransformation\n|+CommonTransformation ( matrix : const Mat4 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"df/dec/class_composite" [ label="Composite\n|+Composite (  )\l/+draw (  : std::unique_ptr\< Renderer \> & ) : void \{virtual\}\l/+isCamera (  ) : bool \{virtual\}\l/+isLight (  ) : bool \{virtual\}\l/+transform (  : Transformation & ) : void \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d1/d47/class_cylinder_size" [ label="CylinderSize\n|+CylinderSize ( height : float, radius : float )\l+getHeight (  ) : float\l+getRadius (  ) : float\l+setHeight ( value : float ) : void\l+setRadius ( value : float ) : void\l|-height : float\l-radius : float\l" shape="record",fixedsize=true,width=10]
"d2/dc7/class_cylinder_size_calculator" [ label="CylinderSizeCalculator\n|+CylinderSizeCalculator (  )\l/+calibrate ( lines : const std::vector\< Line \> &, distance : float, radius : float, height : float ) : void \{virtual\}\l/+calibrate ( diag : float, diagPx : float ) : void \{virtual\}\l/+evaluate ( lines : const Lines & ) : CylinderSize \{virtual\}\l+~CylinderSizeCalculator (  ) \{virtual\}\l-calculateSize (  ) : void\l-findEdges (  ) : void\l|-distance : float\l-factor : float\l-lines : Lines\l-size : CylinderSize\l" shape="record",fixedsize=true,width=10]
"df/d7d/class_cylinder_size_calculator_base" [ label="CylinderSizeCalculatorBase\nabstract\n|+calibrate ( lines : const std::vector\< Line \> &, distance : float, radius : float, height : float ) : void \{pure-virtual\}\l+calibrate ( daig : float, diagPx : float ) : void \{pure-virtual\}\l+evaluate ( lines : const std::vector\< Line \> & ) : CylinderSize \{pure-virtual\}\l+~CylinderSizeCalculatorBase (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d9/d8a/class_edge_detector" [ label="EdgeDetector\nabstract\n|+process ( image : Image & ) : void \{pure-virtual\}\l+~EdgeDetector (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d3/d0b/class_gaussian_blur" [ label="GaussianBlur\n|+GaussianBlur ( sigma : float, kernelSize : uint8 )\l+getKernelSize (  ) : uint8\l+getSigma (  ) : float\l/+process ( image : Image & ) : void \{virtual\}\l+setKernelSize ( value : const uint8 & ) : void\l+setSigma ( value : float ) : void\l+~GaussianBlur (  ) \{virtual\}\l|-kernelSize : uint8\l-sigma : float\l" shape="record",fixedsize=true,width=10]
"dd/d52/class_grayscale_image" [ label="GrayscaleImage\n|+GrayscaleConverter (  ) : friend class\l+ImageConverter (  ) : friend class\l|" shape="record",fixedsize=true,width=10]
"d9/db7/class_homogeneous_vertex_converter" [ label="HomogeneousVertexConverter\n|+FromVertex ( vec : const Vec3 & ) : HomogeneousVertex \{static\}\l+ToVertex ( hvec : const HomogeneousVertex & ) : Vec3 \{static\}\l|" shape="record",fixedsize=true,width=10]
"d6/dd5/class_hough_transform" [ label="HoughTransform\n|+HoughTransform ( threshold : uint32 )\l/+process ( image : Image & ) : std::vector\< Line \> \{virtual\}\l+~HoughTransform (  ) \{virtual\}\l-brezenhem ( color : Image &, line : const Line & ) : void\l-drawLines ( color : Image & ) : void\l-fillAccumulator (  ) : void\l-getLines (  ) : void\l|-accumulator : std::vector\< Points \>\l-accumulatorHeight : uint32\l-accumulatorWidth : uint32\l-image : GrayscaleImage\l-lines : std::vector\< Line \>\l-threshold : uint32\l" shape="record",fixedsize=true,width=10]
"de/d73/class_image" [ label="Image\n|+GrayscaleConverter (  ) : friend class\l+ImageConverter (  ) : friend class\l|" shape="record",fixedsize=true,width=10]
"db/d6b/class_image_base" [ label="ImageBase\n|+ImageBase (  )\l+ImageBase ( image : ImageBase && )\l+ImageBase ( image : const ImageBase & )\l+ImageBase ( height : uint32, width : uint32 )\l+at ( i : uint32, j : uint32 ) : const T &\l+getHeight (  ) : uint32\l+getWidth (  ) : uint32\l+operator= ( image : ImageBase && ) : ImageBase &\l+operator= ( image : const ImageBase & ) : ImageBase &\l+set ( i : uint32, j : uint32, color : const T & ) : void\l+setHeight ( value : uint32 ) : void\l+setWidth ( value : uint32 ) : void\l-GrayscaleConverter (  ) : friend class\l-ImageConverter (  ) : friend class\l|-data : std::unique_ptr\< T[]\>\l-height : uint32\l-width : uint32\l" shape="record",fixedsize=true,width=10]
"db/db1/class_image_converter" [ label="ImageConverter\n|+GrayscaleImageToImage ( image : const GrayscaleImage & ) : Image \{static\}\l+ImageToGrayscalImage ( image : const Image & ) : GrayscaleImage \{static\}\l+ImageToQImage ( image : const Image & ) : QImage \{static\}\l+QImageToImage ( qImage : const QImage & ) : Image \{static\}\l-getGrayscale ( color : const Color & ) : uint8 \{static\}\l|" shape="record",fixedsize=true,width=10]
"df/de8/class_image_view" [ label="ImageView\n|+ImageView ( parent : QWidget * )\l+setImage ( image : const QImage & ) : void\l#mouseMoveEvent (  : QMouseEvent * ) : void\l#resizeEvent ( event : QResizeEvent * ) : void\l|-scene : QGraphicsScene *\l" shape="record",fixedsize=true,width=10]
"da/d7c/class_light" [ label="Light\nabstract\n|+Light (  )\l+Light ( position : const Vec3 &, intensity : float )\l/+draw (  : std::unique_ptr\< Renderer \> & ) : void \{virtual\}\l+getIntensity ( normal : const Vec3 &, position : const Vec3 &, camera : const Vec3 &, ka : const Color &, kd : const Co... ) : Color \{pure-virtual\}\l/+isCamera (  ) : bool \{virtual\}\l/+isLight (  ) : bool \{virtual\}\l+isPoint (  ) : bool \{pure-virtual\}\l/+transform ( transformation : Transformation & ) : void \{virtual\}\l+~Light (  ) \{virtual\}\l|#intensity : float\l" shape="record",fixedsize=true,width=10]
"db/d9d/class_light_z_buffer_renderer" [ label="LightZBufferRenderer\n|+LightZBufferRenderer (  )\l+LightZBufferRenderer ( scale : float, width : int32, height : int32 )\l/+addLight (  : SharedLight ) : void \{virtual\}\l/+finish (  ) : void \{virtual\}\l/+getRendered (  ) : uchar * \{virtual\}\l/+renderMesh ( mesh : shared_ptr\< Mesh \> ) : void \{virtual\}\l/+setCamera ( value : SharedCamera ) : void \{virtual\}\l/+start ( width : int32, height : int32 ) : void \{virtual\}\l+~LightZBufferRenderer (  ) \{virtual\}\l#calculateIntensity ( n : const Vec3 &, orig : const Vec3 &, ka : const Color &, kd : const Color &, ks : const Color &,... ) : Color\l#fillTriangle ( triangle : Triangle & ) : void\l#getBrezenhemX ( p1 : const Vec3 &, p2 : const Vec3 & ) : std::vector\< float \>\l#getLeftRightBounds ( lleft : std::vector\< float \> &, lright : std::vector\< float \> &, nleft : std::vector\< Vec3 \> &, nr... ) : void\l#getNormals ( l : const std::vector\< float \> &, n1 : const Vec3 &, n2 : const Vec3 & ) : std::vector\< Vec3 \>\l#getZLine ( p1 : const Vec3 &, p2 : const Vec3 &, n : int32 ) : std::vector\< float \>\l#putPixel ( x : int32, y : int32, color : const Color & ) : void\l#triangleSort ( vertices : const std::vector\< Vec3 \> &, triangle : Triangle & ) : void\l|#buffer : uchar *\l#camera : SharedCamera\l#currentMesh : shared_ptr\< Mesh \>\l#lights : vector\< SharedLight \>\l#meshes : vector\< shared_ptr\< Mesh \> \>\l#projected : vector\< Vec3 \>\l#zbuffer : ZBuffer\l" shape="record",fixedsize=true,width=10]
"dd/db4/class_line" [ label="Line\n|+Line (  )\l+Line ( p1 : const Vec2 &, p2 : const Vec2 & )\l+getP1 (  ) : Vec2\l+getP2 (  ) : Vec2\l+length (  ) : float\l+setP1 ( value : const Vec2 & ) : void\l+setP2 ( value : const Vec2 & ) : void\l|-p1 : Vec2\l-p2 : Vec2\l" shape="record",fixedsize=true,width=10]
"d3/d23/class_line_transform" [ label="LineTransform\nabstract\n|+process ( image : Image & ) : std::vector\< Line \> \{pure-virtual\}\l+~LineTransform (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d9/dc6/class_main_window" [ label="MainWindow\n|+MainWindow ( parent : QWidget * )\l+~MainWindow (  )\l#resizeEvent (  : QResizeEvent * ) : void\l-debug_setScene (  ) : void\l-fitToWindow (  ) : void\l-initFileDialog ( dialog : QFileDialog &, acceptMode : QFileDialog::AcceptMode ) : void\l-loadFile ( filename : const QString & ) : bool\l-on_actAnimation_triggered (  ) : void\l-on_actOpenImage_triggered (  ) : void\l-on_actRestore_triggered (  ) : void\l-on_btnCalibrate_clicked (  ) : void\l-on_btnCannyApply_clicked (  ) : void\l-on_btnEval_clicked (  ) : void\l-on_btnGaussApply_clicked (  ) : void\l-on_btnHoughApply_clicked (  ) : void\l-on_rbnDiag_toggled ( checked : bool ) : void\l-on_rbnStandard_toggled ( checked : bool ) : void\l-on_sldKernelSize_valueChanged ( value : int ) : void\l-on_sldMaxThresh_valueChanged ( value : int ) : void\l-on_sldMinThresh_valueChanged ( value : int ) : void\l-on_sldSigma_valueChanged ( value : int ) : void\l-on_sldThresh_valueChanged ( value : int ) : void\l-openFile (  ) : void\l-setImage ( newImage : const QImage & ) : void\l-updateActions (  ) : void\l|-calc : CylinderSizeCalculator\l-image : QImage\l-state : int\l-ui : Ui::MainWindow *\l-w : AnimationWindow\l" shape="record",fixedsize=true,width=10]
"dc/dee/class_material" [ label="Material\n|+Material (  )\l+Material ( ka : const Color &, kd : const Color &, ks : const Color &, ns : float, ni : float, d : float )\l+getD (  ) : float\l+getKa (  ) : const Color &\l+getKd (  ) : const Color &\l+getKs (  ) : const Color &\l+getNi (  ) : float\l+getNs (  ) : float\l+setD ( value : float ) : void\l+setKa ( value : const Color & ) : void\l+setKd ( value : const Color & ) : void\l+setKs ( value : const Color & ) : void\l+setNi ( value : float ) : void\l+setNs ( value : float ) : void\l|-d : float\l-ka : Color\l-kd : Color\l-ks : Color\l-ni : float\l-ns : float\l" shape="record",fixedsize=true,width=10]
"d4/d34/class_math" [ label="Math\n|+Abs ( value : double ) : double \{static\}\l+Atan ( value : double ) : double \{static\}\l+Bisection ( a : double, b : double, f : const Func &, eps : double ) : double \{static\}\l+Clamp ( value : const T &, max : const T &, min : const T & ) : T \{static\}\l+Cos ( angle : double ) : double \{static\}\l+Ctg ( x : double ) : double \{static\}\l+Gauss2 ( sigma : double, x : int32, y : int32 ) : double \{static\}\l+Pow ( x : double, y : double ) : double \{static\}\l+Sin ( angle : double ) : double \{static\}\l+Sqrt ( value : double ) : double \{static\}\l+Tan ( angle : double ) : double \{static\}\l+ToDegrees ( radians : double ) : double \{static\}\l+ToRadians ( degrees : double ) : double \{static\}\l+sgn ( val : const T & ) : int32 \{static\}\l|+PI : constexpr double \{static\}\l" shape="record",fixedsize=true,width=10]
"d6/d3f/class_matrix" [ label="Matrix\n|+Matrix (  )\l+Matrix ( values : const T * )\l+data (  ) : T *\l+data (  ) : const T *\l+fill ( value : const T & ) : void\l+isIdentity (  ) : bool\l+operator!= ( other : const Matrix\< M, N, T \> & ) : bool\l+operator() ( row : int32, column : int32 ) : T &\l+operator() ( row : int32, column : int32 ) : const T &\l+operator* ( factor : TT, matrix : const Matrix\< MM, NN, TT \> & ) : friend Matrix\< MM, NN, TT \>\l+operator* ( m1 : const Matrix\< M1, NN, TT \> &, m2 : const Matrix\< NN, M2, TT \> & ) : friend Matrix\< M1, M2, TT \>\l+operator* ( matrix : const Matrix\< MM, NN, TT \> &, factor : TT ) : friend Matrix\< MM, NN, TT \>\l+operator*= ( factor : T ) : Matrix\< M, N, T \> &\l+operator+ ( m1 : const Matrix\< MM, NN, TT \> &, m2 : const Matrix\< MM, NN, TT \> & ) : friend Matrix\< MM, NN, TT \>\l+operator+= ( other : const Matrix\< M, N, T \> & ) : Matrix\< M, N, T \> &\l+operator- ( m1 : const Matrix\< MM, NN, TT \> &, m2 : const Matrix\< MM, NN, TT \> & ) : friend Matrix\< MM, NN, TT \>\l+operator- ( matrix : const Matrix\< MM, NN, TT \> & ) : friend Matrix\< MM, NN, TT \>\l+operator-= ( other : const Matrix\< M, N, T \> & ) : Matrix\< M, N, T \> &\l+operator/ ( matrix : const Matrix\< MM, NN, TT \> &, divisor : TT ) : friend Matrix\< MM, NN, TT \>\l+operator/= ( divisor : T ) : Matrix\< M, N, T \> &\l+operator== ( other : const Matrix\< M, N, T \> & ) : bool\l+setToIdentity (  ) : void\l+transposed (  ) : Matrix\< N, M, T \>\l|-m : T\l" shape="record",fixedsize=true,width=10]
"dc/dbe/class_mesh" [ label="Mesh\n|+Mesh (  )\l+getMaterial (  ) : Material &\l+getTriangles (  ) : vector\< Triangle \> &\l+getVertices (  ) : vector\< Vertex \> &\l+setMaterial ( value : const Material & ) : void\l+setTriangles ( value : const vector\< Triangle \> & ) : void\l+setVertices ( value : const vector\< Vertex \> & ) : void\l+transform ( transformation : const Transformation & ) : void\l|-material : Material\l-triangles : vector\< Triangle \>\l-vertices : vector\< Vertex \>\l" shape="record",fixedsize=true,width=10]
"d0/de3/class_model" [ label="Model\n|+Model (  )\l+Model ( position : const Vec3 &, mesh : const Mesh & )\l/+draw ( renderer : std::unique_ptr\< Renderer \> & ) : void \{virtual\}\l+getMesh (  ) : Mesh\l/+isCamera (  ) : bool \{virtual\}\l/+isLight (  ) : bool \{virtual\}\l+setMesh ( mesh : const Mesh & ) : void\l/+transform ( transformation : Transformation & ) : void \{virtual\}\l+~Model (  ) \{virtual\}\l|-mesh : Mesh\l" shape="record",fixedsize=true,width=10]
"db/da7/class_model_factory" [ label="ModelFactory\n|+ModelFactory ( position : const Vec3 &, mesh : const Mesh & )\l/+create (  ) : SharedSceneObject \{virtual\}\l+~ModelFactory (  ) \{virtual\}\l|-model : std::unique_ptr\< Model \>\l" shape="record",fixedsize=true,width=10]
"d4/d22/class_model_matrix" [ label="ModelMatrix\n|+create ( vertex : const Vec3 & ) : Mat4 \{static\}\l|" shape="record",fixedsize=true,width=10]
"da/d17/class_model_view" [ label="ModelView\n|+ModelView ( parent : QWidget * )\l+setModelScene ( value : std::unique_ptr\< Scene \> && ) : void\l#mouseMoveEvent ( event : QMouseEvent * ) : void\l#mousePressEvent ( event : QMouseEvent * ) : void\l#resizeEvent ( event : QResizeEvent * ) : void\l-scheduler (  ) : void\l-updateCanvas (  ) : void\l|-canvas : QPixmap\l-graphicsScene : QGraphicsScene *\l-lastPos : QPoint\l-renderer : std::unique_ptr\< Renderer \>\l-scene : std::unique_ptr\< Scene \>\l-timer : QTimer *\l" shape="record",fixedsize=true,width=10]
"d5/d8f/class_model_view2" [ label="ModelView2\n|+ModelView2 ( parent : QWidget * )\l#mouseMoveEvent ( event : QMouseEvent * ) : void\l#mousePressEvent ( event : QMouseEvent * ) : void\l#paintEvent (  : QPaintEvent * ) : void\l#wheelEvent ( event : QWheelEvent * ) : void\l-sceneSetup (  ) : void\l-scheduler (  ) : void\l-updateCanvas (  ) : void\l|-actionManager : unique_ptr\< ActionManager \>\l-image : QImage\l-lastPos : QPoint\l-renderer : unique_ptr\< Renderer \>\l-scene : unique_ptr\< Scene \>\l-time : QTime\l-timer : QTimer *\l" shape="record",fixedsize=true,width=10]
"da/d5b/class_move_transformation" [ label="MoveTransformation\n|+MoveTransformation ( delta : const Vec3 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d5/dd8/class_obj_loader" [ label="ObjLoader\n|+Load ( filename : const string & ) : Mesh \{static\}\l+ObjLoader ( filename : const string & )\l+load (  ) : Mesh\l|-filename : string\l" shape="record",fixedsize=true,width=10]
"d6/d8c/class_perspective_matrix" [ label="PerspectiveMatrix\n|+create ( fovy : float, aspect : float, zNear : float, zFar : float ) : Mat4 \{static\}\l|" shape="record",fixedsize=true,width=10]
"dd/d0a/class_point_light" [ label="PointLight\n|+PointLight ( position : const Vec3 &, intensity : float )\l/+getIntensity ( n : const Vec3 &, p : const Vec3 &, c : const Vec3 &,  : const Color &, kd : const Color &, ks : const ... ) : Color \{virtual\}\l/+isPoint (  ) : bool \{virtual\}\l+~PointLight (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"de/d1d/class_point_light_factory" [ label="PointLightFactory\n|+PointLightFactory ( position : const Vec3 &, intensity : float )\l/+create (  ) : SharedSceneObject \{virtual\}\l+~PointLightFactory (  ) \{virtual\}\l|-light : std::unique_ptr\< PointLight \>\l" shape="record",fixedsize=true,width=10]
"da/dce/class_render_data" [ label="RenderData\n|+RenderData (  )\l|" shape="record",fixedsize=true,width=10]
"d4/d44/class_renderer" [ label="Renderer\nabstract\n|+Renderer (  )\l+Renderer ( scale : float, width : int32, height : int32 )\l+addLight ( value : SharedLight ) : void \{pure-virtual\}\l+finish (  ) : void \{pure-virtual\}\l+getRendered (  ) : uchar * \{pure-virtual\}\l+renderMesh ( mesh : shared_ptr\< Mesh \> ) : void \{pure-virtual\}\l+setCamera ( value : SharedCamera ) : void \{pure-virtual\}\l+start ( width : int32, height : int32 ) : void \{pure-virtual\}\l|#height : int32\l#scale : float\l#width : int32\l" shape="record",fixedsize=true,width=10]
"de/dd1/class_repeat_move_action" [ label="RepeatMoveAction\n|+RepeatMoveAction ( duration : float, object : weak_ptr\< SceneObject \>, finish : const Vec3 & )\l/+update ( delta : float ) : bool \{virtual\}\l|#diff : Vec3\l#start : Vec3\l" shape="record",fixedsize=true,width=10]
"dc/d6a/class_rotate_x_transformation" [ label="RotateXTransformation\n|+RotateXTransformation ( angle : float, origin : const Vec3 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|#_origin : Vec3\l" shape="record",fixedsize=true,width=10]
"d1/d32/class_rotate_y_transformation" [ label="RotateYTransformation\n|+RotateYTransformation ( angle : float, origin : const Vec3 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|#_origin : Vec3\l" shape="record",fixedsize=true,width=10]
"d0/dac/class_rotate_z_transformation" [ label="RotateZTransformation\n|+RotateZTransformation ( angle : float, origin : const Vec3 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|#_origin : Vec3\l" shape="record",fixedsize=true,width=10]
"dc/d60/class_scale_transformation" [ label="ScaleTransformation\n|+ScaleTransformation ( scale : const Vec3 &, setOrigin : const Vec3 & )\l/+resetOrigin (  ) : void \{virtual\}\l/+transform ( vertex : Vec3 & ) : void \{virtual\}\l|#_origin : Vec3\l" shape="record",fixedsize=true,width=10]
"d6/db5/class_scene" [ label="Scene\n|+Scene (  )\l+add ( child : const SharedSceneObject & ) : void \{virtual\}\l+getActiveCamera (  ) : WeakCamera \{virtual\}\l+getChildren (  ) : const vector\< SharedSceneObject \> & \{virtual\}\l+render ( renderer : std::unique_ptr\< Renderer \> & ) : void \{virtual\}\l+setActiveCamera ( child : const SharedSceneObject & ) : void \{virtual\}\l+~Scene (  ) \{virtual\}\l|#_camera : WeakCamera\l#_children : vector\< SharedSceneObject \>\l#lights : vector\< WeakLight \>\l" shape="record",fixedsize=true,width=10]
"dc/df8/class_scene_object" [ label="SceneObject\nabstract\n|+SceneObject (  )\l+SceneObject ( position : const Vec3 & )\l+draw ( render : std::unique_ptr\< Renderer \> & ) : void \{pure-virtual\}\l+getPosition (  ) : const Vec3 & \{virtual\}\l+isCamera (  ) : bool \{pure-virtual\}\l+isLight (  ) : bool \{pure-virtual\}\l+setPosition ( value : const Vec3 & ) : void \{virtual\}\l+transform ( transformation : Transformation & ) : void \{pure-virtual\}\l+~SceneObject (  ) \{virtual\}\l|#position : Vec3\l" shape="record",fixedsize=true,width=10]
"d4/df7/class_scene_object_factory" [ label="SceneObjectFactory\nabstract\n|+SceneObjectFactory (  )\l+create (  ) : SharedSceneObject \{pure-virtual\}\l+~SceneObjectFactory (  ) \{virtual\}\l|" shape="record",fixedsize=true,width=10]
"d1/d32/class_transformation" [ label="Transformation\nabstract\n|+Transformation (  )\l+getMatrix (  ) : const Mat4 &\l+resetOrigin (  ) : void \{pure-virtual\}\l+transform ( vertex : Vec3 & ) : void \{pure-virtual\}\l+~Transformation (  ) \{virtual\}\l|#_matrix : Mat4\l" shape="record",fixedsize=true,width=10]
"d2/d28/class_triangle" [ label="Triangle\n|+Triangle (  )\l+Triangle ( v1 : const int32 &, v2 : const int32 &, v3 : const int32 & )\l+getV1 (  ) : int32\l+getV2 (  ) : int32\l+getV3 (  ) : int32\l+setV1 ( value : const int32 & ) : void\l+setV2 ( value : const int32 & ) : void\l+setV3 ( value : const int32 & ) : void\l|-v : array\< int, 3 \>\l" shape="record",fixedsize=true,width=10]
"d8/dbe/class_vector2" [ label="Vector2\n|+Vector2 (  )\l+Vector2 ( x : const T &, y : const T & )\l+getX (  ) : T\l+getY (  ) : T\l+setX ( value : const T & ) : void\l+setY ( value : const T & ) : void\l|-x : T\l-y : T\l" shape="record",fixedsize=true,width=10]
"d3/de7/class_vector3" [ label="Vector3\n|+Vector3 (  )\l+Vector3 ( x : const T &, y : const T &, z : const T & )\l+cross ( value : const Vector3 & ) : Vector3\l+dot ( value : const Vector3 & ) : T\l+length (  ) : float\l+normalized (  ) : Vector3\l+operator* ( factor : float ) : Vector3\l+operator*= ( factor : float ) : Vector3 &\l+operator+ ( value : const Vector3 & ) : Vector3\l+operator+= ( value : const Vector3 & ) : Vector3 &\l+operator- (  ) : Vector3\l+operator- ( value : const Vector3 & ) : Vector3\l+operator-= ( value : const Vector3 & ) : Vector3 &\l+operator== ( value : const Vector3 & ) : bool\l+setX ( value : const T & ) : void\l+setY ( value : const T & ) : void\l+setZ ( value : const T & ) : void\l+x (  ) : T\l+y (  ) : T\l+z (  ) : T\l|-xc : T\l-yc : T\l-zc : T\l" shape="record",fixedsize=true,width=10]
"d0/d72/class_vertex" [ label="Vertex\n|+Vertex (  )\l+Vertex ( v : const Vec3, n : const Vec3 )\l+getN (  ) : const Vec3 &\l+getV (  ) : const Vec3 &\l+operator== ( other : const Vertex & ) : bool\l+setN ( value : const Vec3 & ) : void\l+setV ( value : const Vec3 & ) : void\l+transform ( transformation : const Transformation & ) : void\l|-n : Vec3\l-v : Vec3\l" shape="record",fixedsize=true,width=10]
"d7/d66/class_view_matrix" [ label="ViewMatrix\n|+create ( eye : const Vec3 &, target : const Vec3 &, up : const Vec3 & ) : Mat4 \{static\}\l|" shape="record",fixedsize=true,width=10]
"d6/d99/class_z_buffer" [ label="ZBuffer\n|+ZBuffer (  )\l+get ( x : int32, y : int32 ) : float\l+init (  ) : void\l+set ( x : int32, y : int32, value : float ) : void\l+setSize ( w : int32, h : int32 ) : void\l|-buffer : vector\< float \>\l-height : int32\l-width : int32\l" shape="record",fixedsize=true,width=10]
"de/d31/classobjl_1_1_loader" [ label="objl::Loader\n|+LoadFile ( Path : std::string ) : bool\l+Loader (  )\l+~Loader (  )\l-GenVerticesFromRawOBJ ( oVerts : std::vector\< Vertex \> &, iPositions : const std::vector\< Vector3 \> &, iTCoords : const... ) : void\l-LoadMaterials ( path : std::string ) : bool\l-VertexTriangluation ( oIndices : std::vector\< unsigned int \> &, iVerts : const std::vector\< Vertex \> & ) : void\l|+LoadedIndices : std::vector\< unsigned int \>\l+LoadedMaterials : std::vector\< Material \>\l+LoadedMeshes : std::vector\< Mesh \>\l+LoadedVertices : std::vector\< Vertex \>\l" shape="record",fixedsize=true,width=10]
"d2/dbb/structobjl_1_1_material" [ label="objl::Material\n|+Material (  )\l|+Ka : Vector3\l+Kd : Vector3\l+Ks : Vector3\l+Ni : float\l+Ns : float\l+d : float\l+illum : int\l+map_Ka : std::string\l+map_Kd : std::string\l+map_Ks : std::string\l+map_Ns : std::string\l+map_bump : std::string\l+map_d : std::string\l+name : std::string\l" shape="record",fixedsize=true,width=10]
"db/dea/structobjl_1_1_mesh" [ label="objl::Mesh\n|+Mesh (  )\l+Mesh ( _Vertices : std::vector\< Vertex \> &, _Indices : std::vector\< unsigned int \> & )\l|+Indices : std::vector\< unsigned int \>\l+MeshMaterial : Material\l+MeshName : std::string\l+Vertices : std::vector\< Vertex \>\l" shape="record",fixedsize=true,width=10]
"df/d1a/structobjl_1_1_vector2" [ label="objl::Vector2\n|+Vector2 (  )\l+Vector2 ( X_ : float, Y_ : float )\l+operator!= ( other : const Vector2 & ) : bool\l+operator* ( other : const float & ) : Vector2\l+operator+ ( right : const Vector2 & ) : Vector2\l+operator- ( right : const Vector2 & ) : Vector2\l+operator== ( other : const Vector2 & ) : bool\l|+X : float\l+Y : float\l" shape="record",fixedsize=true,width=10]
"d0/d73/structobjl_1_1_vector3" [ label="objl::Vector3\n|+Vector3 (  )\l+Vector3 ( X_ : float, Y_ : float, Z_ : float )\l+operator!= ( other : const Vector3 & ) : bool\l+operator* ( other : const float & ) : Vector3\l+operator+ ( right : const Vector3 & ) : Vector3\l+operator- ( right : const Vector3 & ) : Vector3\l+operator== ( other : const Vector3 & ) : bool\l|+X : float\l+Y : float\l+Z : float\l" shape="record",fixedsize=true,width=10]
"d4/dd1/structobjl_1_1_vertex" [ label="objl::Vertex\n||+Normal : Vector3\l+Position : Vector3\l+TextureCoordinate : Vector2\l" shape="record",fixedsize=true,width=10]