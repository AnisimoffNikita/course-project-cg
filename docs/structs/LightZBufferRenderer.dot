digraph LightZBufferRenderer
{
graph [ rankdir="RL" ]
"db/d9d/class_light_z_buffer_renderer" [ label="LightZBufferRenderer\n|+LightZBufferRenderer (  )\l+LightZBufferRenderer ( scale : float, width : int32, height : int32 )\l/+addLight (  : SharedLight ) : void \{virtual\}\l/+finish (  ) : void \{virtual\}\l/+getRendered (  ) : uchar * \{virtual\}\l/+renderMesh ( mesh : shared_ptr\< Mesh \> ) : void \{virtual\}\l/+setCamera ( value : SharedCamera ) : void \{virtual\}\l/+start ( width : int32, height : int32 ) : void \{virtual\}\l+~LightZBufferRenderer (  ) \{virtual\}\l#calculateIntensity ( n : const Vec3 &, orig : const Vec3 &, ka : const Color &, kd : const Color &, ks : const Color &,... ) : Color\l#fillTriangle ( triangle : Triangle & ) : void\l#getBrezenhemX ( p1 : const Vec3 &, p2 : const Vec3 & ) : std::vector\< float \>\l#getLeftRightBounds ( lleft : std::vector\< float \> &, lright : std::vector\< float \> &, nleft : std::vector\< Vec3 \> &, nr... ) : void\l#getNormals ( l : const std::vector\< float \> &, n1 : const Vec3 &, n2 : const Vec3 & ) : std::vector\< Vec3 \>\l#getZLine ( p1 : const Vec3 &, p2 : const Vec3 &, n : int32 ) : std::vector\< float \>\l#putPixel ( x : int32, y : int32, color : const Color & ) : void\l#triangleSort ( vertices : const std::vector\< Vec3 \> &, triangle : Triangle & ) : void\l|#buffer : uchar *\l#camera : SharedCamera\l#currentMesh : shared_ptr\< Mesh \>\l#lights : vector\< SharedLight \>\l#meshes : vector\< shared_ptr\< Mesh \> \>\l#projected : vector\< Vec3 \>\l#zbuffer : ZBuffer\l" shape="record" ]
}